
结合提供的图片这个需求是后端传递信息给前端，程序调用该接口就异步返回信息(补充状态、结束时间、日志内容)，同时另一个线程去执行其他方法。
状态：成功、失败、运行时
结束时间：获取系统的时间
日志内容：成功无内容，失败返回失败日志内容。
在processData方法中补充。

以下是提供的FilePreprocessingController类：


@RestController
@RestSchema(schemaId = "fileProcess")
@RequestMapping(GdeCseConstant.SERVICE_URL_PREFIX + "/nebulatool")
@Api(tags = GdeCseConstant.SERVICE_PUBLIC_API_TAG)
public class FilePreprocessingController {
    private static final Logger LOGGER = LoggerFactory.getLogger(FilePreprocessingController.class);

    @Autowired
    private AppProperties appProperties;

    @Autowired
    private FileSynchronizationService fileSynchronizationService;

    @Autowired
    private DataProcessingService dataProcessingService;

    @Autowired
    private DataFilterService dataFilterService;

    private static final ReentrantLock REENTRANT_LOCK = new ReentrantLock();

    @GetMapping("/downloadAndProcess")
    public ResponseResult<JSONObject> processData() {
        boolean isLocked = false;
        JSONObject result;
        try {
            if (REENTRANT_LOCK.isLocked()) {
                return new ResponseResult<>(HttpStatus.OK.value(), new JSONObject(), "Current preprocessing task conflicts, thread locked, please wait for execution completion and try again.");
            }
            REENTRANT_LOCK.lock();
            isLocked = true;
            FileSynchronizationServiceImpl.fetchConfigFromPage();
            appProperties.fetchPathFromPage();
            if (fileSynchronizationService.synchronizeFiles()) {
                dataFilterService.filterData();
            }else {
                LOGGER.warn("The preprocessing file is not updated , No processing ");
            }
            // 删除文件需放到finally里
            result = fileSynchronizationService.uploadResultFiles(FileSynchronizationServiceImpl.LOCALTEMPDIR, FileSynchronizationServiceImpl.map.get("col"));
            if (result.containsKey(CodeStatus.SUCCESS.getValue())) {
                return new ResponseResult<>(HttpStatus.OK.value(), new JSONObject(), result.getString(CodeStatus.SUCCESS.getValue()));
            } else {
                return new ResponseResult<>(HttpStatus.OK.value(), new JSONObject(), result.getString(CodeStatus.FAILED.getValue()));
            }
        } catch (Exception e) {
            LOGGER.error("processData failed, msg: {}", e.getMessage());
            return new ResponseResult<>(HttpStatus.OK.value(), new JSONObject(), "task is failed !!");
        } finally {
            if (isLocked) {
                REENTRANT_LOCK.unlock();
            }
        }
    }
}
