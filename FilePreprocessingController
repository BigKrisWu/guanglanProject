import static com.huawei.fiber.service.impl.FileSynchronizationServiceImpl.clearLocalTempDir;
import com.huawei.fiber.config.AppProperties;
import com.huawei.fiber.constant.CodeStatus;
import com.huawei.fiber.constant.LogRequest;
import com.huawei.fiber.constant.TaskStatus;
import com.huawei.fiber.resp.ResponseResult;
import com.huawei.fiber.service.DataFilterService;
import com.huawei.fiber.service.DataProcessingService;
import com.huawei.fiber.service.FileSynchronizationService;
import com.huawei.fiber.service.impl.FileSynchronizationServiceImpl;
import com.huawei.ows.sdk.base.cse.GdeCseConstant;

import com.alibaba.fastjson.JSONObject;

import io.swagger.annotations.Api;

import org.apache.servicecomb.provider.rest.common.RestSchema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import java.time.Instant;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantLock;

/**
 * 包含文件下载和处理调用
 *
 * @since 2024/3/13
 */
@RestController
@RestSchema(schemaId = "fileProcess")
@RequestMapping(GdeCseConstant.SERVICE_URL_PREFIX + "/nebulatool")
@Api(tags = GdeCseConstant.SERVICE_PUBLIC_API_TAG)
public class FilePreprocessingController {
    private static final Logger LOGGER = LoggerFactory.getLogger(FilePreprocessingController.class);
    @Autowired
    private AppProperties appProperties;
    @Autowired
    private FileSynchronizationService fileSynchronizationService;
    @Autowired
    private DataProcessingService dataProcessingService;
    @Autowired
    private DataFilterService dataFilterService;
    private static final ReentrantLock REENTRANT_LOCK = new ReentrantLock();
    private static final ConcurrentHashMap<String, TaskStatus> TASK_STATUS_MAP = new ConcurrentHashMap<>();

    @RequestMapping(value = "/downloadAndProcess", method = RequestMethod.POST, produces = "application/json;charset=UTF-8")
    public ResponseResult<JSONObject> processData(@RequestBody LogRequest logRequest) {
        String log_id = logRequest.getLogId();
        TASK_STATUS_MAP.put( log_id, new TaskStatus(log_id,"RUNNING", null, null));
        if (REENTRANT_LOCK.isLocked()) {
            return new ResponseResult<>(HttpStatus.BAD_REQUEST.value(), new JSONObject(),
                "Current preprocessing task conflicts, thread locked, please wait for execution completion and try again.");
        } else {
            REENTRANT_LOCK.lock();
        }

        CompletableFuture.runAsync(() -> {
            try {
                FileSynchronizationServiceImpl.fetchConfigFromPage();
                appProperties.fetchPathFromPage();
                if (fileSynchronizationService.synchronizeFiles()) {
                    dataFilterService.filterData();
                } else {
                    LOGGER.warn("The preprocessing file is not updated , No processing ");
                }
                JSONObject result = fileSynchronizationService.uploadResultFiles(
                    FileSynchronizationServiceImpl.LOCALTEMPDIR, FileSynchronizationServiceImpl.PATH_MAP.get("col"));
                if (result.containsKey(CodeStatus.SUCCESS.getValue())) {
                    updateTaskStatus(log_id, "SUCCESS", getCurrentTimestampMillis(), "");
                } else {
                    updateTaskStatus(log_id, "FAILED", getCurrentTimestampMillis(), result.getString(CodeStatus.FAILED.getValue()));
                }
            } catch (Exception e) {
                LOGGER.error("processData failed, msg: {}", e.getMessage());
                updateTaskStatus(log_id, "FAILED", getCurrentTimestampMillis(), e.getMessage());
            } finally {
                clearLocalTempDir();
                REENTRANT_LOCK.unlock();
            }
        });
        updateTaskStatus(log_id, "SUCCESS", getCurrentTimestampMillis(), "");
        return new ResponseResult<>(HttpStatus.OK.value(), new JSONObject(),"task is success");
    }
    private void updateTaskStatus(String log_id, String log_state, Long finish_time, String content) {
        TaskStatus taskStatus = TASK_STATUS_MAP.get(log_id);
        if (taskStatus != null) {
            taskStatus.setLog_state(log_state);
            taskStatus.setFinish_time(finish_time);
            taskStatus.setContent(content);
        }
    }
    private long getCurrentTimestampMillis() {
        return Instant.now().toEpochMilli();
    }
}
