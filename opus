


@Component
public class DataFilterService {
    private static final Logger LOGGER = LoggerFactory.getLogger(DataFilterService.class);
    private static final String SRC_TMP_DIR = "/opt/collection/srcTemp/";
    public void filterData() throws IOException {
        List<RuleModel> ruleModels = ServiceUtil.getC2DataRules();
        ruleModels.sort(Comparator.comparingInt(RuleModel::getNum));

        String baselineResultFile = null;
        for (RuleModel ruleModel : ruleModels) {
            String primaryTable = ruleModel.getPrimaryTable();
            String combinedTable = ruleModel.getCombinedTable();

            if (ruleModel.getNum() == 1) {
                String baselineFile = SRC_TMP_DIR + getOriginalFile(primaryTable);
                baselineResultFile = filterBaselineData(baselineFile, ruleModel.getBaseFilters(), primaryTable);
            } else {
                String combinedFile = SRC_TMP_DIR + getOriginalFile(combinedTable);
                String resultFile = filterCombinedData(baselineResultFile, combinedFile, ruleModel.getCombinedFilters(), ruleModel.getRelationFilters(), combinedTable);
                deleteMatchingFiles(ruleModel);

                if (combinedTable != null && !combinedTable.isEmpty()) {
                    baselineResultFile = resultFile;
                }
            }
        }
    }

    private String getOriginalFile(String fileName) throws IOException {
        try (Stream<Path> paths = Files.walk(Paths.get(SRC_TMP_DIR))) {
            Optional<Path> matchingFile = paths.filter(Files::isRegularFile)
                .filter(path -> path.getFileName().toString().contains(fileName))
                .findFirst();

            return matchingFile.map(Path::getFileName).map(Path::toString).orElse(null);
        }
    }
    private String filterBaselineData(String baselineFile, List<FilterModel> baseFilters, String resultFileName) {
        List<String[]> filteredData = new ArrayList<>();
        try (CSVReader reader = new CSVReader(new FileReader(baselineFile))) {
            String[] headers = reader.readNext();
            String[] ruleHeaders = RuleConstants.RULE_HEADERS.get(1);
            filteredData.add(ruleHeaders);

            String[] row;
            while ((row = reader.readNext()) != null) {
                boolean match = true;
                for (FilterModel filter : baseFilters) {
                    int index = ArrayUtils.indexOf(headers, filter.getFilterField());
                    if (index >= 0) {
                        String value = row[index];
                        if (!evaluateCondition(value, filter.getOperator(), filter.getFilterValue())) {
                            match = false;
                            break;
                        }
                    }
                }
                if (match) {
                    String[] filteredRow = new String[ruleHeaders.length];
                    for (int i = 0; i < headers.length; i++) {
                        String header = headers[i];
                        int index = ArrayUtils.indexOf(ruleHeaders, header);
                        if (index >= 0) {
                            filteredRow[index] = row[i];
                        }
                    }
                    filteredData.add(filteredRow);
                }
            }
        } catch (IOException | CsvException e) {
            LOGGER.error("Error occurred while filtering baseline data: {}", baselineFile, e);
        }

        String resultFilePath = SRC_TMP_DIR + resultFileName + ".csv";
        writeCSV(resultFilePath, filteredData);
        return resultFilePath;
    }


    private String filterCombinedData(String baselineResultFile, String combinedFile, List<FilterModel> combinedFilters, List<ConditionModel> relationFilters, String resultFileName) {
        List<String[]> baselineData = readCSV(baselineResultFile);
        String[] baselineHeaders = baselineData.get(0);

        List<String[]> filteredData = new ArrayList<>();
        filteredData.add(RuleConstants.RULE_HEADERS.get(2));

        try (CSVReader reader = new CSVReader(new FileReader(combinedFile))) {
            String[] combinedHeaders = reader.readNext();

            String[] combinedRow;
            while ((combinedRow = reader.readNext()) != null) {
                boolean combinedMatch = evaluateFilters(combinedRow, combinedHeaders, combinedFilters);

                boolean relationMatch = false;
                if (combinedMatch) {
                    relationMatch = evaluateRelationFilters(combinedRow, combinedHeaders, baselineData, baselineHeaders, relationFilters);
                }

                if (combinedMatch && relationMatch) {
                    String[] filteredRow = new String[RuleConstants.RULE_HEADERS.get(2).length];
                    for (int j = 0; j < combinedHeaders.length; j++) {
                        String header = combinedHeaders[j];
                        int index = ArrayUtils.indexOf(RuleConstants.RULE_HEADERS.get(2), header);
                        if (index >= 0) {
                            filteredRow[index] = combinedRow[j];
                        }
                    }
                    filteredData.add(filteredRow);
                }
            }
        } catch (IOException | CsvException e) {
            LOGGER.error("Error occurred while filtering combined data: {}", combinedFile, e);
        }

        String resultFilePath = SRC_TMP_DIR + resultFileName + ".csv";
        writeCSV(resultFilePath, filteredData);
        return resultFilePath;
    }
    private boolean evaluateFilters(String[] row, String[] headers, List<FilterModel> filters) {
        return filters.stream().allMatch(filter -> {
            int index = ArrayUtils.indexOf(headers, filter.getFilterField());
            if (index >= 0) {
                String value = row[index];
                return evaluateCondition(value, filter.getOperator(), filter.getFilterValue());
            }
            return true;
        });
    }

    private boolean evaluateRelationFilters(String[] combinedRow, String[] combinedHeaders, List<String[]> baselineData, String[] baselineHeaders, List<ConditionModel> relationFilters) {
        return relationFilters.stream().allMatch(relationFilter -> {
            int combinedIndex = ArrayUtils.indexOf(combinedHeaders, relationFilter.getCombinedField());
            int baselineIndex = ArrayUtils.indexOf(baselineHeaders, relationFilter.getBaseField());
            if (combinedIndex >= 0 && baselineIndex >= 0) {
                String combinedValue = combinedRow[combinedIndex];
                return baselineData.stream().anyMatch(baselineRow -> {
                    String baselineValue = baselineRow[baselineIndex];
                    return evaluateCondition(baselineValue, relationFilter.getOperator(), combinedValue);
                });
            }
            return true;
        });
    }
    private boolean evaluateCondition(String value, String operator, String filterValue) {
        switch (operator) {
            case "=":
                return filterValue.equals(value);
            case "!=":
                return !filterValue.equals(value);
            case "contains":
                return value.contains(filterValue);
            case "is empty":
                return value.isEmpty();
            case "is not empty":
                return !value.isEmpty();
            default:
                return false;
        }
    }
    private void deleteMatchingFiles(RuleModel ruleModel) throws IOException {
        String tableName = StringUtils.isNotBlank(ruleModel.getCombinedTable()) ? ruleModel.getCombinedTable() : ruleModel.getPrimaryTable();
        try (Stream<Path> paths = Files.walk(Paths.get(SRC_TMP_DIR))) {
            paths.filter(Files::isRegularFile)
                .filter(path -> path.getFileName().toString().contains(tableName))
                .filter(path -> !path.getFileName().toString().startsWith(tableName))
                .forEach(path -> {
                    File file = path.toFile();
                    if (file.delete()) {
                        LOGGER.warn("Deleted file: {}", file.getAbsolutePath());
                    } else {
                        LOGGER.warn("Failed to delete file: {}", file.getAbsolutePath());
                    }
                });
        }
    }

    private List<String[]> readCSV(String filePath) {
        List<String[]> data = new ArrayList<>();
        try (CSVReader reader = new CSVReader(new FileReader(filePath))) {
            String[] row;
            while ((row = reader.readNext()) != null) {
                data.add(row);
            }
        } catch (IOException | CsvException e) {
            LOGGER.error("Error occurred while reading CSV file: {}", filePath, e.getMessage());
        }
        return data;
    }

    private void writeCSV(String filePath, List<String[]> data) {
        try (CSVWriter writer = new CSVWriter(new FileWriter(filePath))) {
            for (String[] row : data) {
                writer.writeNext(row);
            }
        } catch (IOException e) {
            LOGGER.error("Error occurred while writing CSV file: {}", filePath, e.getMessage());
        }
    }


}
