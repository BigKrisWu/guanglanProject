
package com.huawei.fiber.service;
import com.huawei.fiber.entity.CommonRule;
import com.huawei.fiber.entity.ConditionModel;
import com.huawei.fiber.entity.FilterModel;
import com.huawei.fiber.entity.RuleModel;
import com.huawei.fiber.utils.ServiceUtil;
import com.huawei.us.common.file.UsFileUtils;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvException;

import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;
import java.util.stream.Stream;

/**
 * c2数据统一
 *
 * @since 2024/5/31
 */
@Component
public class DataFilterService {
    private static final Logger LOGGER = LoggerFactory.getLogger(DataFilterService.class);

    private static final String SRC_TMP_DIR = "/opt/backup/glcollection/srctemp/";

    private static final AtomicInteger ruleStage = new AtomicInteger(0);

    public boolean filterData() throws IOException {
        LOGGER.info("[DataFilterService][filterData]start to filter c2 data.");
        List<RuleModel> ruleModels = ServiceUtil.getC2DataRules();
        ruleModels.sort(Comparator.comparingInt(RuleModel::getNum));
        ruleStage.set(0);
        boolean flag = true;
        for (RuleModel ruleModel : ruleModels) {
            String primaryTable = ruleModel.getPrimaryTable();
            String combinedTable = ruleModel.getCombinedTable();
            if (ruleModel.getNum() == 1) {
                ruleStage.incrementAndGet();
                String baselineFile = SRC_TMP_DIR + getOriginalFile(primaryTable);
                LOGGER.info("[DataFilterService][filterData]start to filter file: {}", baselineFile);
                filterBaselineData(baselineFile, ruleModel.getBaseFilters(), primaryTable);
                LOGGER.info("[DataFilterService][filterData]finished to filter file: {}", baselineFile);
            } else {
                ruleStage.incrementAndGet();
                String combinedFile = SRC_TMP_DIR + getOriginalFile(combinedTable);
                if (flag) {
                    LOGGER.info("[DataFilterService][filterData]start to filter file: {}", combinedFile);
                    flag &= filterCombinedData(SRC_TMP_DIR + primaryTable + ".csv", combinedFile,
                        ruleModel.getCombinedFilters(), ruleModel.getRelationFilters(), combinedTable);
                    LOGGER.info("[DataFilterService][filterData]finished to filter file: {}", combinedFile);
                }else {
                    break;
                }
            }
            deleteMatchingFiles(ruleModel);

        }
        if (flag) {
            LOGGER.info("[DataFilterService][filterData]finished to filter c2 data.");
        }
        return flag;
    }


    private String getOriginalFile(String fileName) throws IOException {
        try (Stream<Path> walked = Files.walk(UsFileUtils.getFile(SRC_TMP_DIR).toPath())) {
            Optional<Path> matchingFile = walked.filter(Files::isRegularFile)
                .filter(path -> path.getFileName().toString().contains(fileName))
                .findFirst();

            return matchingFile.map(Path::getFileName).map(Path::toString).orElse(null);
        }
    }

    private void filterBaselineData(String baselineFile, List<FilterModel> baseFilters, String resultFileName) {
        List<String[]> filteredData = new ArrayList<>();
        try (CSVReader reader = new CSVReader(UsFileUtils.getFileReader(baselineFile))) {
            String[] headers = reader.readNext();
            filteredData.add(headers);

            String[] row;
            while ((row = reader.readNext()) != null) {
                doBaseFilter(baseFilters, headers, row, headers, row, filteredData);
            }
        } catch (IOException | CsvException e) {
            LOGGER.error("Error Occurred During Filtering of Baseline Data.: {}", baselineFile, e);
        }

        String resultFilePath = SRC_TMP_DIR + resultFileName + ".csv";
        writeCSV(resultFilePath, filteredData);
    }

    private void doBaseFilter(List<FilterModel> baseFilters, String[] headers, String[] currentRow,
        String[] ruleHeaders, String[] row, List<String[]> filteredData) {
        boolean match = baseFilters.stream().allMatch(filter -> {
            int index = ArrayUtils.indexOf(headers, filter.getFilterField());
            if (index >= 0 && index < currentRow.length) {
                String value = currentRow[index];
                return evaluateCondition(value, filter.getOperator(), filter.getFilterValue());
            }
            return false;
        });

        if (match) {
            String[] filteredRow = new String[ruleHeaders.length];
            for (int i = 0; i < headers.length; i++) {
                String header = headers[i];
                int index = ArrayUtils.indexOf(ruleHeaders, header);
                if (index >= 0) {
                    filteredRow[index] = row[i];
                }
            }
            filteredData.add(filteredRow);
        }
    }

    private boolean filterCombinedData(String baselineResultFile, String combinedFile,
        List<FilterModel> combinedFilters, List<ConditionModel> relationFilters, String resultFileName) {
        if (!Files.exists(UsFileUtils.getFile(baselineResultFile).toPath()) || !Files.exists(UsFileUtils.getFile(combinedFile).toPath())) {
            return false;
        }
        List<String[]> baselineData = readCSV(baselineResultFile);
        String[] baselineHeaders = baselineData.get(0);

        List<String[]> filteredData = new ArrayList<>();
        // 所有组组下的过滤和关联规则
        HashMap<String, ArrayList<CommonRule>> groupAll = getGroupMap(combinedFilters, relationFilters);
        try (CSVReader reader = new CSVReader(UsFileUtils.getFileReader(combinedFile))) {
            String[] combinedHeaders = reader.readNext();
            filteredData.add(combinedHeaders);
            String[] combinedRow;
            HashMap<String, Set<String>> baseAll = getBaseMapByGroup(baselineData, baselineHeaders, groupAll);
            while ((combinedRow = reader.readNext()) != null) {
                doMultiFilter(groupAll, combinedRow, combinedHeaders, baseAll, baselineData, baselineHeaders,
                    filteredData);
            }
        } catch (Exception e) {
            LOGGER.error("occur error when filter: {}, msg: {}", combinedFile, e.getMessage());
        }

        String resultFilePath = SRC_TMP_DIR + resultFileName + ".csv";
        writeCSV(resultFilePath, filteredData);
        LOGGER.info("finished to filter file: {}", combinedFile);
        return true;
    }

    private void doMultiFilter(HashMap<String, ArrayList<CommonRule>> groupAll, String[] combinedRow,
        String[] combinedHeaders, HashMap<String, Set<String>> baseAll, List<String[]> baselineData,
        String[] baselineHeaders, List<String[]> filteredData) {
        try {
            // 每条数据去匹配规则 group1(&&) || group2(&&) 碰到一个规则满足就跳到下一条
            for (Map.Entry<String, ArrayList<CommonRule>> entry : groupAll.entrySet()) {
                String groupName = entry.getKey();
                ArrayList<CommonRule> ruleList = entry.getValue();
                List<FilterModel> combinedFiltersNew = getFilterRule(ruleList);
                List<ConditionModel> relationFiltersNew = getRelationRule(ruleList);

                // one group filter
                boolean nowGroupMatch = evaluateFilters(combinedRow, combinedHeaders, combinedFiltersNew);

                // one group conn
                if (nowGroupMatch) {
                    nowGroupMatch = evaluateRelationFilters(groupName, baseAll, combinedRow, combinedHeaders,
                        baselineData, baselineHeaders, relationFiltersNew);
                }

                if (doExtract(combinedRow, combinedHeaders, filteredData, nowGroupMatch)) {
                    break;
                }
            }
        } catch (Exception e) {
            LOGGER.warn("skip invalid data: {}", e.getMessage());
        }
    }

    private static boolean doExtract(String[] combinedRow, String[] combinedHeaders, List<String[]> filteredData,
        boolean nowGroupMatch) {
        if (nowGroupMatch) {
            String[] filteredRow = new String[combinedHeaders.length];
            for (int j = 0; j < combinedHeaders.length; j++) {
                filteredRow[j] = combinedRow[j];
            }
            filteredData.add(filteredRow);
            return true;
        }
        return false;
    }

    private HashMap<String, Set<String>> getBaseMapByGroup(List<String[]> baselineData, String[] baseHeader,
        HashMap<String, ArrayList<CommonRule>> groupAll) {
        HashMap<String, Set<String>> res = new HashMap<>();
        for (Map.Entry<String, ArrayList<CommonRule>> entry : groupAll.entrySet()) {
            String groupName = entry.getKey();
            ArrayList<CommonRule> ruleList = entry.getValue();
            List<ConditionModel> relationFiltersNew = getRelationRule(ruleList);
            for (ConditionModel cm : relationFiltersNew) {
                int baseIndex = ArrayUtils.indexOf(baseHeader, cm.getBaseField());
                Set<String> collected = baselineData.stream()
                    .map(strings -> baseIndex < strings.length
                        ? strings[baseIndex].trim().replaceAll("^\"|\"$", "")
                        : "")
                    .collect(Collectors.toSet());
                Set<String> standardBasedValue = collected.stream()
                    .map(this::standardFromID)
                    .collect(Collectors.toSet());
                String key = groupName + "-" + cm.getBaseField();
                if (!res.containsKey(key)) {
                    res.put(key, standardBasedValue);
                }
            }
        }
        return res;
    }

    private List<ConditionModel> getRelationRule(ArrayList<CommonRule> ruleList) {
        List<ConditionModel> conditionModels = new ArrayList<>();
        for (CommonRule rule : ruleList) {
            if (StringUtils.isNotEmpty(rule.getBaseField()) || StringUtils.isNotEmpty(rule.getCombinedField())) {
                conditionModels.add((ConditionModel) rule);
            }
        }
        return conditionModels;
    }

    private List<FilterModel> getFilterRule(ArrayList<CommonRule> ruleList) {
        List<FilterModel> filterModels = new ArrayList<>();
        for (CommonRule rule : ruleList) {
            if (StringUtils.isNotEmpty(rule.getFilterField())) {
                filterModels.add((FilterModel) rule);
            }
        }
        return filterModels;
    }

    private HashMap<String, ArrayList<CommonRule>> getGroupMap(List<FilterModel> combinedFilters,
        List<ConditionModel> relationFilters) {
        HashMap<String, ArrayList<CommonRule>> res = new HashMap<>();
        for (FilterModel fm : combinedFilters) {
            String groupName = fm.getGroupName();
            if (!res.containsKey(groupName)) {
                res.put(groupName, new ArrayList<>());
            }
            res.get(groupName).add(fm);
        }
        for (ConditionModel cm : relationFilters) {
            String groupName = cm.getGroupName();
            if (!res.containsKey(groupName)) {
                res.put(groupName, new ArrayList<>());
            }
            res.get(groupName).add(cm);
        }
        return res;
    }

    private boolean evaluateFilters(String[] row, String[] headers, List<FilterModel> filters) {
        if (filters.isEmpty()) {
            return true;
        }
        for (FilterModel filter : filters) {
            int index = ArrayUtils.indexOf(headers, filter.getFilterField());
            String value = row[index];
            if (!evaluateCondition(value, filter.getOperator(), filter.getFilterValue())) {
                return false;
            }
        }
        return true;
    }

    private boolean evaluateRelationFilters(String group, HashMap<String, Set<String>> baseAll, String[] combinedRow,
        String[] combinedHeaders, List<String[]> baselineData, String[] baselineHeaders,
        List<ConditionModel> relationFilters) {
        if (relationFilters.isEmpty()) {
            return true;
        }
        for (ConditionModel relationFilter : relationFilters) {
            HashSet<String> set = new HashSet<>();
            int combinedIndex = ArrayUtils.indexOf(combinedHeaders, relationFilter.getCombinedField());
            int baselineIndex = ArrayUtils.indexOf(baselineHeaders, relationFilter.getBaseField());
            String combinedValue = combinedRow[combinedIndex];
            if (!evaluateConnCondition(baseAll.get(group + "-" + relationFilter.getBaseField()),
                relationFilter.getOperator(), combinedValue)) {
                return false;
            }
        }
        return true;
    }

    private boolean evaluateConnCondition(Set<String> baseValue, String operator, String combinedValue) {
        String value = standardFromID(combinedValue);
        // contains表达的应该是包含ID，能关联上的意思  页面的=操作符没有作用
        return baseValue.contains(value);
    }

    private boolean evaluateCondition(String value, String operator, String filterValue) {
        switch (operator) {
            case "=":
                return filterValue.equals(value);
            case "!=":
                return !filterValue.equals(value);
            case "contains":
                return value.contains(filterValue);
            case "is empty":
                return value.isEmpty();
            case "is not empty":
                return !value.isEmpty();
            default:
                return false;
        }
    }
    private String standardFromID(String id) {
        return id.replaceAll("\\.\\d+$", "");
    }

    private void deleteMatchingFiles(RuleModel ruleModel) {
        String tableName = StringUtils.isNotBlank(ruleModel.getCombinedTable())
            ? ruleModel.getCombinedTable()
            : ruleModel.getPrimaryTable();
        try (Stream<Path> paths = Files.walk(UsFileUtils.getFile(SRC_TMP_DIR).toPath())) {
            paths.filter(Files::isRegularFile)
                .filter(path -> path.getFileName().toString().contains(tableName))
                .filter(path -> !path.getFileName().toString().startsWith(tableName))
                .forEach(DataFilterService::deleteFile);
        } catch (IOException e) {
            LOGGER.error("Failed to delete file error {}", e.getMessage());
        }
    }

    private static void deleteFile(Path path) {
        File file = null;
        try {
            file = path.toFile();
        } finally {
            if (file != null) {
                if (file.delete()) {
                    LOGGER.warn("Deleted file: {}", path.toAbsolutePath());
                } else {
                    LOGGER.warn("Failed to delete file: {}", path.toAbsolutePath());
                }
            }
        }
    }

    private List<String[]> readCSV(String filePath) {
        try (CSVReader reader = new CSVReader(UsFileUtils.getFileReader(filePath))) {
            return reader.readAll();
        } catch (IOException | CsvException e) {
            LOGGER.error("Error occurred while reading CSV file {}", e.getMessage());
            return new ArrayList<>();
        }
    }

    private void writeCSV(String filePath, List<String[]> data) {
        try (CSVWriter writer = new CSVWriter(UsFileUtils.getFileWriter(filePath))) {
            writer.writeAll(data);
        } catch (IOException e) {
            LOGGER.error("Error occurred while writing result CSV file {}", e.getMessage());
        }
    }
}
