package com.huawei.fiber.processor;
import com.huawei.baize.security.misc.io.FileSecUtils;
import com.huawei.fiber.config.AppProperties;
import com.huawei.us.common.file.UsFileUtils;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 *  数据预处理抽象类
 *
 * @since 2024/3/4
 */
public abstract class AbstractCsvProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractCsvProcessor.class);

    @Autowired
    private AppProperties appProperties;
    
    protected String[] headerColumns;

    protected String[] columnName;

    // 主处理方法
    public void process(String rmsPath, String previousStepResultPath, String outputPath) throws IOException {
        appProperties.setResultSrc(rmsPath);
        appProperties.setPreviousStepResultPath(previousStepResultPath);
        appProperties.setResult(outputPath);
        Map<String, Set<String>> includeColumnIds = fetchIds(previousStepResultPath, columnName);
        processFiles(includeColumnIds);
    }

    protected Map<String, Set<String>> fetchIds(String filePath, String[] columnNames) throws IOException {
        HashMap<String, Set<String>> includeColumnIds = new HashMap<>();
        for (String columnName : columnNames) {
            Set<String> tempIncludeColumnIds = new HashSet<>(); // 为每个列名创建一个新的Set
            try (CSVParser parser = new CSVParser(UsFileUtils.getFileReader(filePath),
                CSVFormat.DEFAULT.withHeader())) {
                for (CSVRecord record : parser) {
                    tempIncludeColumnIds.add(record.get(columnName));
                }
            }
            includeColumnIds.put(columnName, new HashSet<>(tempIncludeColumnIds)); // 将新的Set加入到Map中
        }
        return includeColumnIds;
    }

    private void processFiles(Map<String, Set<String>> includeColumnIds) throws IOException {
        File[] files = FileSecUtils.getFile(appProperties.getResultSrc().toString()).listFiles();
        if (files == null) {
            throw new IOException("Invalid rmsPath: " + appProperties.getResultSrc().toString());
        }

        Set<String> matchedIds = new HashSet<>();
        for (File file : files) {
            if (filterFile(file.getName())) {
                try (CSVPrinter printer = new CSVPrinter(
                    UsFileUtils.getFileWriter(appProperties.getResult().toString()),
                    CSVFormat.DEFAULT.withHeader(headerColumns))) {
                    LOGGER.warn("Processing file: " + file);
                    processSingleFile(file, includeColumnIds, matchedIds, printer);
                }
            }
        }
    }

    protected abstract boolean filterFile(String fileName);

    protected abstract void processSingleFile(File file, Map<String, Set<String>> includeColumnIds,
        Set<String> matchedIds, CSVPrinter printer) throws IOException;

    protected void printRecord(CSVRecord record, CSVPrinter printer) throws IOException {
        List<String> data = new ArrayList<>();
        for (String column : headerColumns) {
            if (record.isSet(column)) {
                data.add(record.get(column));
            }
        }
        printer.printRecord(data);
    }
}
