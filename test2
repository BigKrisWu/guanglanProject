public class JsonDataParser {

    public static List<RuleModel> parseJson(JSONArray jsonArray) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        List<RuleModel> ruleModels = new ArrayList<>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            RuleModel ruleModel = new RuleModel();
            ruleModel.setNum(jsonObject.getInt("num"));
            ruleModel.setRuleName(jsonObject.getString("rule_name"));
            ruleModel.setPrimaryTable(jsonObject.getString("primary_table"));
            ruleModel.setCombinedTable(jsonObject.getString("combined_table"));

            String baseFilterString = jsonObject.getString("base_filter");
            JSONArray baseFilterArray = new JSONArray(baseFilterString);
            List<FilterModel> baseFilters = objectMapper.readValue(
                baseFilterArray.toString(),
                new TypeReference<List<FilterModel>>() {}
            );
            ruleModel.setBaseFilters(baseFilters);

            String combinedFilterString = jsonObject.getString("combined_filter");
            JSONArray combinedFilterArray = new JSONArray(combinedFilterString);
            List<FilterModel> combinedFilters = objectMapper.readValue(
                combinedFilterArray.toString(),
                new TypeReference<List<FilterModel>>() {}
            );
            ruleModel.setCombinedFilters(combinedFilters);

            String relationFilterString = jsonObject.getString("relation_filter");
            JSONArray relationFilterArray = new JSONArray(relationFilterString);
            List<ConditionModel> relationFilters = objectMapper.readValue(
                relationFilterArray.toString(),
                new TypeReference<List<ConditionModel>>() {}
            );
            ruleModel.setRelationFilters(relationFilters);

            ruleModels.add(ruleModel);
        }

        return ruleModels;
    }
}
