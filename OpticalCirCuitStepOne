
package com.huawei.fiber.processor;

import com.huawei.fiber.constant.ColumnNameConstant;
import com.huawei.us.common.file.UsFileUtils;

import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.springframework.stereotype.Component;

import java.io.File;
import java.io.IOException;
import java.io.Reader;
import java.util.Map;
import java.util.Set;

/**
 *  OpticalCirCuit处理类步骤1
 *
 * @since 2024/3/5
 */
@Component
public class OpticalCirCuitStepOne extends AbstractCsvProcessor {
    private static final String OPTICALCIRCUIT_NAME_TAG = "IRM_IV_OPTICALCIRCUIT";
    private static final String[] HEADER_COLUMNS = {
        "PREFECTURE_ID", "TOWNSHIP_ID", "NAME", "COUNTY_ID", "ID", "CARRYSYSTEM", "CIRCUITLEVEL", "ZENDPORT_ID",
        "AENDPORTNAME", "ZENDDEVICENAME", "AENDDDFCONNECTOR_ID", "AENDDEVICENAME", "ZENDSTRONGHOLD_ID",
        "ZENDACCESSROOMDEVICEPORT", "AENDROOM_ID", "AENDSTRONGHOLD_ID", "ZENDDEVICE_ID", "ZENDPORTNAME",
        "ZENDDDFCONNECTORNAME", "AENDPORT_ID", "AENDSITE_ID", "AENDACCESSROOMDEVICENAME", "ZENDACCESSROOMDEVICEODFPORT",
        "ZENDDDFCONNECTOR_ID", "AENDACCESSROOMDEVICEPORT", "ZENDROOM_ID", "ZENDSITE_ID", "ZENDACCESSROOMDEVICENAME",
        "AENDDDFCONNECTORNAME", "AENDDEVICE_ID", "AENDACCESSROOMDEVICEODFPORT"
    };

    private static final String[] COLUMN_NAME = {"ID"};

    public OpticalCirCuitStepOne() {
        super.headerColumns = HEADER_COLUMNS;
        super.columnName = COLUMN_NAME;
    }

    @Override
    protected boolean filterFile(String fileName) {
        return fileName.contains(OPTICALCIRCUIT_NAME_TAG);
    }

    @Override
    protected void processSingleFile(File file, Map<String, Set<String>> includeColumnIds, Set<String> matchedIds,
        CSVPrinter printer) throws IOException {
        try (Reader in = UsFileUtils.getFileReader(file);
            CSVParser parser = new CSVParser(in,
                CSVFormat.DEFAULT.withFirstRecordAsHeader().withIgnoreHeaderCase().withTrim())) {
            for (CSVRecord record : parser) {
                try {
                    // A端能匹配上再Z端匹配二干设备，可得到AZ端都能匹配的二干设备
                    if (record.isSet("AENDDEVICE_ID") && record.isSet("ZENDDEVICE_ID") && record.isSet(
                        "CIRCUITLEVEL")) {
                        String aendDeviceId = record.get("AENDDEVICE_ID");
                        String zendDeviceId = record.get("ZENDDEVICE_ID");
                        String circuitLevel = record.get("CIRCUITLEVEL");
                        // 确保A端和Z端都匹配上二干设备，且电路级别为6
                        if (includeColumnIds.get(ColumnNameConstant.ID.getName()).contains(aendDeviceId)
                            && includeColumnIds.get(ColumnNameConstant.ID.getName()).contains(zendDeviceId) || "6".equals(circuitLevel)) {
                            printRecord(record, printer);
                        }
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
