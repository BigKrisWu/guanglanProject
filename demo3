
使用下面提供的三个模型和JSON解析方法实现之前同样的功能，如果能实现就正常输出，如果实现起来困难就直接告诉我"不好实现"。
/**
 * 规则模型
 *
 * @since 2024/5/18
 */
@NoArgsConstructor
@AllArgsConstructor
@Data
public class RuleModel2 {
    private int num;
    @JsonProperty("rule_name")
    private String ruleName;
    @JsonProperty("primary_table")
    private String primaryTable;

    @JsonProperty("combined_table")
    private String combinedTable;
    @JsonProperty("base_filter")
    private List<FilterModel2> baseFilters;

    @JsonProperty("combined_filter")
    private List<FilterModel2> combinedFilters;
    @JsonProperty("relation_filter")
    private List<ConditionModel2> relationFilters;
}


/**
 * 过滤模型
 *
 * @since 2024/5/18
 */
@NoArgsConstructor
@AllArgsConstructor
@Data
public class FilterModel2 {
    @JsonProperty("group_name")
    private String groupName;
    @JsonProperty("filter_field")
    private String filterField;
    private String operator;
    @JsonProperty("filter_value")
    private String filterValue;
    @JsonProperty("rule_id")
    private String ruleId;
    @JsonProperty("filter_flag")
    private String filterFlag;
}


/**
 * 关联模型
 *
 * @since 2024/5/18
 */
@NoArgsConstructor
@AllArgsConstructor
@Data
public class ConditionModel2 {
    @JsonProperty("group_name")
    private String groupName;
    @JsonProperty("base_field")
    private String baseField;
    private String operator;
    @JsonProperty("combined_field")
    private String combinedField;
    @JsonProperty("rule_id")
    private String ruleId;
    @JsonProperty("filter_flag")
    private String filterFlag;
}


import com.huawei.fiber.entity.ConditionModel;
import com.huawei.fiber.entity.FilterModel;
import com.huawei.fiber.entity.RuleModel;
import com.huawei.mateinfo.sdk.jsonf.JSONArray;
import com.huawei.mateinfo.sdk.jsonf.JSONObject;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class JsonDataParser {

    public static List<RuleModel> parseJson(JSONArray jsonArray) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();
        objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);
        List<RuleModel> ruleModels = new ArrayList<>();

        for (int i = 0; i < jsonArray.length(); i++) {
            JSONObject jsonObject = jsonArray.getJSONObject(i);
            RuleModel ruleModel = new RuleModel();
            ruleModel.setNum(jsonObject.getInt("num"));
            ruleModel.setRuleName(jsonObject.getString("rule_name"));
            ruleModel.setPrimaryTable(jsonObject.getString("primary_table"));
            ruleModel.setCombinedTable(jsonObject.getString("combined_table"));

            String baseFilterString = jsonObject.getString("base_filter");
            JSONArray baseFilterArray = new JSONArray(baseFilterString);
            List<FilterModel> baseFilters = objectMapper.readValue(
                baseFilterArray.toString(),
                new TypeReference<List<FilterModel>>() {}
            );
            ruleModel.setBaseFilters(baseFilters);

            String combinedFilterString = jsonObject.getString("combined_filter");
            JSONArray combinedFilterArray = new JSONArray(combinedFilterString);
            List<FilterModel> combinedFilters = objectMapper.readValue(
                combinedFilterArray.toString(),
                new TypeReference<List<FilterModel>>() {}
            );
            ruleModel.setCombinedFilters(combinedFilters);

            String relationFilterString = jsonObject.getString("relation_filter");
            JSONArray relationFilterArray = new JSONArray(relationFilterString);
            List<ConditionModel> relationFilters = objectMapper.readValue(
                relationFilterArray.toString(),
                new TypeReference<List<ConditionModel>>() {}
            );
            ruleModel.setRelationFilters(relationFilters);

            ruleModels.add(ruleModel);
        }

        return ruleModels;
    }
}
