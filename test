        Map<String, String> paraMap = new HashMap<>(2);
        paraMap.put("start", "0");
        paraMap.put("limit", "100");
        String res = invokeAppService(CONFIG_GET_URL, JsonUtils.map2Json(paraMap));
        JSONObject result = JacksonUtils.json2Bean(res, JSONObject.class);
        JSONArray results = result.optJSONArray("results");


规则1、原始文件mod-1742848231-732770695_D_RNT_IRM_IV_OTN_D_20231213000000.csv
过滤条件： EQUIPLEVEL ="5"    
结果文件：D_RNT_IRM_IV_OTN_D.CSV                   

规则2、原始文件 208dcff41c144b488f08c9b502de222d_D_RNT_IRM_IV_OPTICALCIRCUIT_D_20230530000000.csv
过滤条件 上一步的结果文件中ID contains AENDDEVICE_ID 并且ID contains ZENDDEVICE_ID 或者 CIRCUITLEVEL="6" 
结果文件  D_RNT_IRM_IV_OPTICALCIRCUIT_D.CSV   


ID,NAME,EQUIPLEVEL,EQUIPMENTVENDOR_ID,ENTITYTYPE_ID,PREFECTURE_ID,COUNTY_ID,TOWNSHIP_ID,SITE_ID,ROOM_ID,STRONGHOLD_ID,NODE_ID,PARENTDEVICE_ID
15914982,242-215-马岙1,1,15,36207,5,45,667,2212732,2212707,,,
15914994,242-34-上阳1,1,15,36207,5,52,130126,2422408,2422593,,,



    public static List<RuleModel> getC2DataRules() throws IOException {
        Map<String, String> paraMap = new HashMap<>();
        paraMap.put("start", "0");
        paraMap.put("limit", "100");
        String res = invokeAppService(C2_DATA_RULE_GET_LIST_URL, JsonUtils.map2Json(paraMap));
        JSONObject result = JacksonUtils.json2Bean(res, JSONObject.class);
        JSONArray results = result.optJSONArray("results");
        List<RuleModel> ruleModels = JsonDataParser.parseJson(results);
        return ruleModels;
    }

    private void deleteMatchingFiles(RuleModel ruleModel) throws IOException {
        String tableName = StringUtils.isNotBlank(ruleModel.getCombinedTable()) ? ruleModel.getCombinedTable() : ruleModel.getPrimaryTable();
        try (Stream<Path> paths = Files.walk(Paths.get(SRC_TMP_DIR))) {
            paths.filter(Files::isRegularFile)
                .filter(path -> path.getFileName().toString().contains(tableName))
                .filter(path -> !path.getFileName().toString().startsWith(tableName))
                .forEach(path -> {
                    File file = path.toFile();
                    if (file.delete()) {
                        LOGGER.warn("Deleted file: {}", file.getAbsolutePath());
                    } else {
                        LOGGER.warn("Failed to delete file: {}", file.getAbsolutePath());
                    }
                });
        }
    }

    private String getOriginalFile(String fileName) throws IOException {
        try (Stream<Path> paths = Files.walk(Paths.get(SRC_TMP_DIR))) {
            Optional<Path> matchingFile = paths.filter(Files::isRegularFile)
                .filter(path -> path.getFileName().toString().contains(fileName))
                .findFirst();

            return matchingFile.map(Path::getFileName).map(Path::toString).orElse(null);
        }
    }
